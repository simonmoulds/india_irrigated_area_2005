*==============================================================================*
*------------------------------- List of parameters----------------------------*

PARAMETER
  OLDMAT(I,J)        A priori (non adjusted) distribution matrix
  NEWMAT(I,J)        Adjusted matrix
  ZSOL(I2,J2)        Solution values of ZED
  EPSILON            Lower bound on ZED to prevent log(0) and divisions by zero

*==============================================================================*
*-------------------------------- Variable names ------------------------------*

VARIABLE
  ZED(I2,J2)    Correction factors to be applied to the elements of OLDMAT
  OBJ           Objective function
;

* It is not sufficient to declare ZED as a positive variable. It must have a
* lower bound, defined below as EPSILON

*==============================================================================*
*------------------------------- Value assignments ----------------------------*

  OLDMAT(I,J) = DATA(I,J) ;

*  Display "INITIAL VALUES:", OLDMAT ;

  EPSILON=0.000001;

*==============================================================================*
*---------------------------------- Equations ---------------------------------*

EQUATIONS
  EQROW(I2)    Constraint on the adjusted row totals
  EQIRRROW(I2) Constraint on adjusted irrigated row totals
  EQCOL(J2)    Constraint on the adjusted column totals
  EQOBJ        Objective function
  ;

  EQROW(I2)..    SUM(J2,OLDMAT(I2,J2)*ZED(I2,J2))
                    =L= OLDMAT(I2,"CRPLND_AR") ;
                    
  EQIRRROW(I2).. SUM(J3,OLDMAT(I2,J3)*ZED(I2,J3))
                    =L= OLDMAT(I2,"IRRI_AR");
                    
  EQCOL(J2)..    SUM(I2,OLDMAT(I2,J2)*ZED(I2,J2))
                    =E= OLDMAT("TOTAL_AR",J2) ;

* The objective function is defined below:
* the specification minimizes cross-entropy (Kullback-Leibler measure),
* that is, information gain.

   EQOBJ..       OBJ =E=
                  SUM((I2,J2),ABS(OLDMAT(I2,J2))*ZED(I2,J2)*log(ZED(I2,J2)))
                  / SUM((I2,J2),ABS(OLDMAT(I2,J2))*ZED(I2,J2))
                  -log(SUM((I2,J2),ABS(OLDMAT(I2,J2))*ZED(I2,J2)))
                  +log(SUM((I2,J2),ABS(OLDMAT(I2,J2))));

*==============================================================================*
*---------------------------- Model definition --------------------------------*
MODEL ADJUS /ALL/;

*==============================================================================*
*------------------------- Initial value assignment ---------------------------*

* The lower bound assigned to ZED guarantees that there will be no log(0)
  ZED.LO(I2,J2) = EPSILON ;

* Initial value of ZED is set to the ratio of the sum of target marginal row
* totals to the sum of old matrix elements.
  ZED.L(I2,J2) = SUM(I2J,OLDMAT(I2J,"CRPLND_AR")) / SUM((I2J,J2J),OLDMAT(I2J,J2J));
  DISPLAY ZED.L ;

*==============================================================================*
*--------------------------Solution of the problem ----------------------------*

$onecho > conopt3.opt
rvhess = 15
$offecho

OPTION ITERLIM=100000;
* The following option limits to 5 the number of decimals
* in DISPLAY statement output only.
OPTION DECIMALS=5;
* It is preferable to use the solver CONOPT, which has a greater precision
* than MINOS5
OPTION NLP=CONOPT3;
ADJUS.OptFile = 1;
ADJUS.reslim = 2000;
SOLVE ADJUS USING NLP MINIMIZING OBJ;

*==============================================================================*
*                                  RESULTS
*---------------------- Calculation of adjusted matrix ------------------------*

  NEWMAT(I2,J2) = OLDMAT(I2,J2)*ZED.L(I2,J2) ;

* It is convenient to include row and column totals in NEWMAT
  NEWMAT("TOTAL_AR",J2) = SUM(I2,NEWMAT(I2,J2));
  NEWMAT(I2,"CRPLND_AR") = SUM(J2,NEWMAT(I2,J2));
  NEWMAT(I2,"IRRI_AR") = SUM(J3,NEWMAT(I2,J3));

  ZSOL(I2,J2)   = ZED.L(I2,J2) ;

  Acronym zero;
  NEWMAT(I,J)$(Not NEWMAT(I,J)) = zero;
  Display "&START NEW MATRIX";
  DISPLAY NEWMAT;
  DISPLAY "&END NEW MATRIX";
*  Display ZSOL;
